// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: audit_info.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuditSubscriptionRequest_Type int32

const (
	AuditSubscriptionRequest_AUDIT_NODE AuditSubscriptionRequest_Type = 0
	AuditSubscriptionRequest_ALL        AuditSubscriptionRequest_Type = 1
)

var AuditSubscriptionRequest_Type_name = map[int32]string{
	0: "AUDIT_NODE",
	1: "ALL",
}

var AuditSubscriptionRequest_Type_value = map[string]int32{
	"AUDIT_NODE": 0,
	"ALL":        1,
}

func (x AuditSubscriptionRequest_Type) String() string {
	return proto.EnumName(AuditSubscriptionRequest_Type_name, int32(x))
}

func (AuditSubscriptionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cf154f79ee0dd05, []int{2, 0}
}

type AuditTxInfo struct {
	Tx                 *BxhTransaction   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Rec                *Receipt          `protobuf:"bytes,2,opt,name=rec,proto3" json:"rec,omitempty"`
	RelatedChainIDList map[string][]byte `protobuf:"bytes,3,rep,name=RelatedChainIDList,proto3" json:"RelatedChainIDList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RelatedNodeIDList  map[string][]byte `protobuf:"bytes,4,rep,name=RelatedNodeIDList,proto3" json:"RelatedNodeIDList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AuditTxInfo) Reset()         { *m = AuditTxInfo{} }
func (m *AuditTxInfo) String() string { return proto.CompactTextString(m) }
func (*AuditTxInfo) ProtoMessage()    {}
func (*AuditTxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf154f79ee0dd05, []int{0}
}
func (m *AuditTxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditTxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditTxInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditTxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditTxInfo.Merge(m, src)
}
func (m *AuditTxInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuditTxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditTxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuditTxInfo proto.InternalMessageInfo

func (m *AuditTxInfo) GetTx() *BxhTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *AuditTxInfo) GetRec() *Receipt {
	if m != nil {
		return m.Rec
	}
	return nil
}

func (m *AuditTxInfo) GetRelatedChainIDList() map[string][]byte {
	if m != nil {
		return m.RelatedChainIDList
	}
	return nil
}

func (m *AuditTxInfo) GetRelatedNodeIDList() map[string][]byte {
	if m != nil {
		return m.RelatedNodeIDList
	}
	return nil
}

type AuditRelatedObjInfo struct {
	AuditObj           []byte            `protobuf:"bytes,1,opt,name=AuditObj,proto3" json:"AuditObj,omitempty"`
	RelatedChainIDList map[string][]byte `protobuf:"bytes,2,rep,name=RelatedChainIDList,proto3" json:"RelatedChainIDList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RelatedNodeIDList  map[string][]byte `protobuf:"bytes,3,rep,name=RelatedNodeIDList,proto3" json:"RelatedNodeIDList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AuditRelatedObjInfo) Reset()         { *m = AuditRelatedObjInfo{} }
func (m *AuditRelatedObjInfo) String() string { return proto.CompactTextString(m) }
func (*AuditRelatedObjInfo) ProtoMessage()    {}
func (*AuditRelatedObjInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf154f79ee0dd05, []int{1}
}
func (m *AuditRelatedObjInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditRelatedObjInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditRelatedObjInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditRelatedObjInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditRelatedObjInfo.Merge(m, src)
}
func (m *AuditRelatedObjInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuditRelatedObjInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditRelatedObjInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuditRelatedObjInfo proto.InternalMessageInfo

func (m *AuditRelatedObjInfo) GetAuditObj() []byte {
	if m != nil {
		return m.AuditObj
	}
	return nil
}

func (m *AuditRelatedObjInfo) GetRelatedChainIDList() map[string][]byte {
	if m != nil {
		return m.RelatedChainIDList
	}
	return nil
}

func (m *AuditRelatedObjInfo) GetRelatedNodeIDList() map[string][]byte {
	if m != nil {
		return m.RelatedNodeIDList
	}
	return nil
}

type AuditSubscriptionRequest struct {
	Type        AuditSubscriptionRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.AuditSubscriptionRequest_Type" json:"type,omitempty"`
	AuditNodeId string                        `protobuf:"bytes,2,opt,name=audit_node_id,json=auditNodeId,proto3" json:"audit_node_id,omitempty"`
	BlockHeight uint64                        `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Extra       []byte                        `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *AuditSubscriptionRequest) Reset()         { *m = AuditSubscriptionRequest{} }
func (m *AuditSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*AuditSubscriptionRequest) ProtoMessage()    {}
func (*AuditSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cf154f79ee0dd05, []int{2}
}
func (m *AuditSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditSubscriptionRequest.Merge(m, src)
}
func (m *AuditSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuditSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuditSubscriptionRequest proto.InternalMessageInfo

func (m *AuditSubscriptionRequest) GetType() AuditSubscriptionRequest_Type {
	if m != nil {
		return m.Type
	}
	return AuditSubscriptionRequest_AUDIT_NODE
}

func (m *AuditSubscriptionRequest) GetAuditNodeId() string {
	if m != nil {
		return m.AuditNodeId
	}
	return ""
}

func (m *AuditSubscriptionRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AuditSubscriptionRequest) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.AuditSubscriptionRequest_Type", AuditSubscriptionRequest_Type_name, AuditSubscriptionRequest_Type_value)
	proto.RegisterType((*AuditTxInfo)(nil), "pb.AuditTxInfo")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.AuditTxInfo.RelatedChainIDListEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.AuditTxInfo.RelatedNodeIDListEntry")
	proto.RegisterType((*AuditRelatedObjInfo)(nil), "pb.AuditRelatedObjInfo")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.AuditRelatedObjInfo.RelatedChainIDListEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "pb.AuditRelatedObjInfo.RelatedNodeIDListEntry")
	proto.RegisterType((*AuditSubscriptionRequest)(nil), "pb.AuditSubscriptionRequest")
}

func init() { proto.RegisterFile("audit_info.proto", fileDescriptor_9cf154f79ee0dd05) }

var fileDescriptor_9cf154f79ee0dd05 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x4d, 0x8b, 0xd3, 0x50,
	0x14, 0x86, 0x7b, 0x93, 0xf8, 0x31, 0x27, 0x9d, 0xa1, 0x5e, 0xbf, 0x42, 0xc0, 0x38, 0x93, 0x85,
	0x76, 0x15, 0xa1, 0x22, 0x88, 0xbb, 0x8e, 0x2d, 0x58, 0x28, 0x53, 0xb8, 0x46, 0xdc, 0x08, 0x21,
	0x1f, 0x77, 0xcc, 0x9d, 0x29, 0x49, 0x4c, 0x6f, 0x25, 0xf9, 0x0f, 0x2e, 0xfc, 0x59, 0xee, 0x9c,
	0xa5, 0x4b, 0x69, 0x7f, 0x87, 0x20, 0x39, 0xb7, 0x74, 0x94, 0xc9, 0x20, 0x5d, 0xba, 0xcb, 0x79,
	0xf3, 0xe6, 0x39, 0xe7, 0xbc, 0x37, 0x09, 0xf4, 0xc2, 0x65, 0x22, 0x64, 0x20, 0xb2, 0xd3, 0xdc,
	0x2b, 0xca, 0x5c, 0xe6, 0x54, 0x2b, 0x22, 0xfb, 0x7e, 0x54, 0xa5, 0x81, 0x2c, 0xc3, 0x6c, 0x11,
	0xc6, 0x52, 0xe4, 0x99, 0xba, 0x65, 0xef, 0x97, 0x3c, 0xe6, 0xa2, 0x90, 0xaa, 0x74, 0xbf, 0xe8,
	0x60, 0x0e, 0x9b, 0xc7, 0xfd, 0x6a, 0x92, 0x9d, 0xe6, 0xd4, 0x05, 0x4d, 0x56, 0x16, 0x39, 0x24,
	0x7d, 0x73, 0x40, 0xbd, 0x22, 0xf2, 0x8e, 0xab, 0xd4, 0xbf, 0x84, 0x30, 0x4d, 0x56, 0xf4, 0x11,
	0xe8, 0x25, 0x8f, 0x2d, 0x0d, 0x4d, 0x66, 0x63, 0x62, 0x8a, 0xc9, 0x1a, 0x9d, 0xbe, 0x07, 0xca,
	0xf8, 0x3c, 0x94, 0x3c, 0x79, 0x9d, 0x86, 0x22, 0x9b, 0x8c, 0xa6, 0x62, 0x21, 0x2d, 0xfd, 0x50,
	0xef, 0x9b, 0x83, 0xa7, 0x8d, 0xfb, 0x8f, 0x7e, 0xde, 0x55, 0xe7, 0x38, 0x93, 0x65, 0xcd, 0x5a,
	0x10, 0xd4, 0x87, 0x3b, 0x1b, 0xf5, 0x24, 0x4f, 0xf8, 0x86, 0x6b, 0x20, 0xf7, 0xc9, 0x35, 0xdc,
	0x4b, 0xa3, 0xc2, 0x5e, 0x05, 0xd8, 0x63, 0x78, 0x78, 0xcd, 0x10, 0xb4, 0x07, 0xfa, 0x39, 0xaf,
	0x31, 0x8d, 0x3d, 0xd6, 0x5c, 0xd2, 0x7b, 0x70, 0xe3, 0x73, 0x38, 0x5f, 0x72, 0x5c, 0xbe, 0xcb,
	0x54, 0xf1, 0x4a, 0x7b, 0x49, 0xec, 0x11, 0x3c, 0x68, 0xef, 0xb9, 0x0b, 0xc5, 0xfd, 0xa5, 0xc1,
	0x5d, 0x5c, 0x63, 0xc3, 0x9a, 0x45, 0x67, 0x78, 0x2c, 0x36, 0xdc, 0x46, 0x79, 0x16, 0x9d, 0x21,
	0xa8, 0xcb, 0xb6, 0x35, 0x0d, 0x5a, 0xf3, 0xd6, 0x30, 0x97, 0x67, 0xdb, 0x5c, 0xfe, 0x06, 0xee,
	0x94, 0xfb, 0x87, 0xb6, 0xdc, 0xd5, 0x79, 0x7a, 0xff, 0xe0, 0xff, 0x6f, 0xf9, 0x7f, 0x27, 0x60,
	0xe1, 0x3a, 0x6f, 0x97, 0xd1, 0x22, 0x2e, 0x45, 0x81, 0x2f, 0x3d, 0xff, 0xb4, 0xe4, 0x0b, 0x49,
	0x5f, 0x80, 0x21, 0xeb, 0x82, 0x23, 0xe9, 0x60, 0x70, 0xb4, 0x5d, 0xbd, 0xc5, 0xeb, 0xf9, 0x75,
	0xc1, 0x19, 0xda, 0xa9, 0x0b, 0xfb, 0xea, 0x03, 0xcd, 0xf2, 0x84, 0x07, 0x22, 0xc1, 0xae, 0x7b,
	0xcc, 0x44, 0x11, 0x87, 0x4d, 0xe8, 0x11, 0x74, 0xa3, 0x79, 0x1e, 0x9f, 0x07, 0x29, 0x17, 0x1f,
	0xd3, 0x26, 0x5d, 0xd2, 0x37, 0x98, 0x89, 0xda, 0x1b, 0x94, 0x9a, 0xa1, 0x79, 0x25, 0xcb, 0xd0,
	0x32, 0xd4, 0xd0, 0x58, 0xb8, 0x8f, 0xc1, 0x68, 0x5a, 0xd1, 0x03, 0x80, 0xe1, 0xbb, 0xd1, 0xc4,
	0x0f, 0x4e, 0x66, 0xa3, 0x71, 0xaf, 0x43, 0x6f, 0x81, 0x3e, 0x9c, 0x4e, 0x7b, 0xe4, 0xd8, 0xfa,
	0xb6, 0x72, 0xc8, 0xc5, 0xca, 0x21, 0x3f, 0x57, 0x0e, 0xf9, 0xba, 0x76, 0x3a, 0x17, 0x6b, 0xa7,
	0xf3, 0x63, 0xed, 0x74, 0xa2, 0x9b, 0xf8, 0x07, 0x78, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf1,
	0x90, 0x9c, 0x95, 0x3f, 0x04, 0x00, 0x00,
}

func (m *AuditTxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditTxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditTxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelatedNodeIDList) > 0 {
		for k := range m.RelatedNodeIDList {
			v := m.RelatedNodeIDList[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAuditInfo(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuditInfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuditInfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RelatedChainIDList) > 0 {
		for k := range m.RelatedChainIDList {
			v := m.RelatedChainIDList[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAuditInfo(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuditInfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuditInfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Rec != nil {
		{
			size, err := m.Rec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuditInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuditInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditRelatedObjInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditRelatedObjInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditRelatedObjInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelatedNodeIDList) > 0 {
		for k := range m.RelatedNodeIDList {
			v := m.RelatedNodeIDList[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAuditInfo(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuditInfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuditInfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RelatedChainIDList) > 0 {
		for k := range m.RelatedChainIDList {
			v := m.RelatedChainIDList[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAuditInfo(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuditInfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuditInfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AuditObj) > 0 {
		i -= len(m.AuditObj)
		copy(dAtA[i:], m.AuditObj)
		i = encodeVarintAuditInfo(dAtA, i, uint64(len(m.AuditObj)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintAuditInfo(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAuditInfo(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuditNodeId) > 0 {
		i -= len(m.AuditNodeId)
		copy(dAtA[i:], m.AuditNodeId)
		i = encodeVarintAuditInfo(dAtA, i, uint64(len(m.AuditNodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAuditInfo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuditInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuditInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuditTxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovAuditInfo(uint64(l))
	}
	if m.Rec != nil {
		l = m.Rec.Size()
		n += 1 + l + sovAuditInfo(uint64(l))
	}
	if len(m.RelatedChainIDList) > 0 {
		for k, v := range m.RelatedChainIDList {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAuditInfo(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAuditInfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuditInfo(uint64(mapEntrySize))
		}
	}
	if len(m.RelatedNodeIDList) > 0 {
		for k, v := range m.RelatedNodeIDList {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAuditInfo(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAuditInfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuditInfo(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AuditRelatedObjInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuditObj)
	if l > 0 {
		n += 1 + l + sovAuditInfo(uint64(l))
	}
	if len(m.RelatedChainIDList) > 0 {
		for k, v := range m.RelatedChainIDList {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAuditInfo(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAuditInfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuditInfo(uint64(mapEntrySize))
		}
	}
	if len(m.RelatedNodeIDList) > 0 {
		for k, v := range m.RelatedNodeIDList {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAuditInfo(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAuditInfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuditInfo(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AuditSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAuditInfo(uint64(m.Type))
	}
	l = len(m.AuditNodeId)
	if l > 0 {
		n += 1 + l + sovAuditInfo(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAuditInfo(uint64(m.BlockHeight))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovAuditInfo(uint64(l))
	}
	return n
}

func sovAuditInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuditInfo(x uint64) (n int) {
	return sovAuditInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditTxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditTxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditTxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &BxhTransaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rec == nil {
				m.Rec = &Receipt{}
			}
			if err := m.Rec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedChainIDList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelatedChainIDList == nil {
				m.RelatedChainIDList = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuditInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuditInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelatedChainIDList[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedNodeIDList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelatedNodeIDList == nil {
				m.RelatedNodeIDList = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuditInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuditInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelatedNodeIDList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditRelatedObjInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditRelatedObjInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditRelatedObjInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditObj = append(m.AuditObj[:0], dAtA[iNdEx:postIndex]...)
			if m.AuditObj == nil {
				m.AuditObj = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedChainIDList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelatedChainIDList == nil {
				m.RelatedChainIDList = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuditInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuditInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelatedChainIDList[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedNodeIDList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelatedNodeIDList == nil {
				m.RelatedNodeIDList = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuditInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuditInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAuditInfo
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuditInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuditInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelatedNodeIDList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuditSubscriptionRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuditInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuditInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuditInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuditInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuditInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuditInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuditInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuditInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuditInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuditInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuditInfo = fmt.Errorf("proto: unexpected end of group")
)
