// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bxh_contract.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//=========transaction_manager=========
type StatusChange struct {
	PrevStatus   TransactionStatus `protobuf:"varint,1,opt,name=PrevStatus,proto3,enum=pb.TransactionStatus" json:"PrevStatus,omitempty"`
	CurStatus    TransactionStatus `protobuf:"varint,2,opt,name=CurStatus,proto3,enum=pb.TransactionStatus" json:"CurStatus,omitempty"`
	OtherIBTPIDs []string          `protobuf:"bytes,3,rep,name=OtherIBTPIDs,proto3" json:"OtherIBTPIDs,omitempty"`
}

func (m *StatusChange) Reset()         { *m = StatusChange{} }
func (m *StatusChange) String() string { return proto.CompactTextString(m) }
func (*StatusChange) ProtoMessage()    {}
func (*StatusChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5480913d363bee7d, []int{0}
}
func (m *StatusChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusChange.Merge(m, src)
}
func (m *StatusChange) XXX_Size() int {
	return m.Size()
}
func (m *StatusChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusChange.DiscardUnknown(m)
}

var xxx_messageInfo_StatusChange proto.InternalMessageInfo

func (m *StatusChange) GetPrevStatus() TransactionStatus {
	if m != nil {
		return m.PrevStatus
	}
	return TransactionStatus_BEGIN
}

func (m *StatusChange) GetCurStatus() TransactionStatus {
	if m != nil {
		return m.CurStatus
	}
	return TransactionStatus_BEGIN
}

func (m *StatusChange) GetOtherIBTPIDs() []string {
	if m != nil {
		return m.OtherIBTPIDs
	}
	return nil
}

//=========dapp_manager=========
type TransferRecord struct {
	From       string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To         string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Reason     string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Confirm    bool   `protobuf:"varint,4,opt,name=Confirm,proto3" json:"Confirm,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (m *TransferRecord) Reset()         { *m = TransferRecord{} }
func (m *TransferRecord) String() string { return proto.CompactTextString(m) }
func (*TransferRecord) ProtoMessage()    {}
func (*TransferRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5480913d363bee7d, []int{1}
}
func (m *TransferRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRecord.Merge(m, src)
}
func (m *TransferRecord) XXX_Size() int {
	return m.Size()
}
func (m *TransferRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRecord proto.InternalMessageInfo

func (m *TransferRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransferRecord) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferRecord) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TransferRecord) GetConfirm() bool {
	if m != nil {
		return m.Confirm
	}
	return false
}

func (m *TransferRecord) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

//=========governance=========
type Ballot struct {
	VoterAddr string `protobuf:"bytes,1,opt,name=VoterAddr,proto3" json:"VoterAddr,omitempty"`
	Approve   string `protobuf:"bytes,2,opt,name=Approve,proto3" json:"Approve,omitempty"`
	Num       uint64 `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	Reason    string `protobuf:"bytes,4,opt,name=Reason,proto3" json:"Reason,omitempty"`
	VoteTime  int64  `protobuf:"varint,5,opt,name=VoteTime,proto3" json:"VoteTime,omitempty"`
}

func (m *Ballot) Reset()         { *m = Ballot{} }
func (m *Ballot) String() string { return proto.CompactTextString(m) }
func (*Ballot) ProtoMessage()    {}
func (*Ballot) Descriptor() ([]byte, []int) {
	return fileDescriptor_5480913d363bee7d, []int{2}
}
func (m *Ballot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ballot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ballot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ballot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ballot.Merge(m, src)
}
func (m *Ballot) XXX_Size() int {
	return m.Size()
}
func (m *Ballot) XXX_DiscardUnknown() {
	xxx_messageInfo_Ballot.DiscardUnknown(m)
}

var xxx_messageInfo_Ballot proto.InternalMessageInfo

func (m *Ballot) GetVoterAddr() string {
	if m != nil {
		return m.VoterAddr
	}
	return ""
}

func (m *Ballot) GetApprove() string {
	if m != nil {
		return m.Approve
	}
	return ""
}

func (m *Ballot) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Ballot) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Ballot) GetVoteTime() int64 {
	if m != nil {
		return m.VoteTime
	}
	return 0
}

//=========trust_chain=========
type TrustMeta struct {
	ChainId           string `protobuf:"bytes,1,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	TrustContractAddr string `protobuf:"bytes,2,opt,name=TrustContractAddr,proto3" json:"TrustContractAddr,omitempty"`
	Method            string `protobuf:"bytes,3,opt,name=Method,proto3" json:"Method,omitempty"`
	Data              []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *TrustMeta) Reset()         { *m = TrustMeta{} }
func (m *TrustMeta) String() string { return proto.CompactTextString(m) }
func (*TrustMeta) ProtoMessage()    {}
func (*TrustMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5480913d363bee7d, []int{3}
}
func (m *TrustMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustMeta.Merge(m, src)
}
func (m *TrustMeta) XXX_Size() int {
	return m.Size()
}
func (m *TrustMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TrustMeta proto.InternalMessageInfo

func (m *TrustMeta) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TrustMeta) GetTrustContractAddr() string {
	if m != nil {
		return m.TrustContractAddr
	}
	return ""
}

func (m *TrustMeta) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TrustMeta) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*StatusChange)(nil), "pb.StatusChange")
	proto.RegisterType((*TransferRecord)(nil), "pb.TransferRecord")
	proto.RegisterType((*Ballot)(nil), "pb.Ballot")
	proto.RegisterType((*TrustMeta)(nil), "pb.TrustMeta")
}

func init() { proto.RegisterFile("bxh_contract.proto", fileDescriptor_5480913d363bee7d) }

var fileDescriptor_5480913d363bee7d = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0xea, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0x49, 0xfe, 0xb5, 0x19, 0x4a, 0xd1, 0x85, 0x4a, 0x28, 0x12, 0x43, 0x4e, 0x39,
	0x48, 0x04, 0x8b, 0x0f, 0xd0, 0xa6, 0x08, 0x3d, 0x54, 0xcb, 0x1a, 0x3c, 0x78, 0x91, 0x4d, 0xb2,
	0x35, 0x81, 0x26, 0x1b, 0x36, 0x9b, 0xe2, 0xcd, 0x9b, 0x67, 0x9f, 0xc0, 0xe7, 0xf1, 0xd8, 0xa3,
	0x47, 0x69, 0x5f, 0x44, 0xb2, 0x49, 0x6c, 0x8a, 0xe0, 0x6d, 0xbe, 0x6f, 0x66, 0x76, 0x7e, 0x3b,
	0x0c, 0xe0, 0xe8, 0x4b, 0xfa, 0x29, 0xe6, 0x85, 0x14, 0x34, 0x96, 0x7e, 0x29, 0xb8, 0xe4, 0x58,
	0x2b, 0xa3, 0xc5, 0xbc, 0xf1, 0xa5, 0xa0, 0x45, 0x45, 0x63, 0x99, 0xf1, 0xa2, 0x4d, 0xb9, 0x3f,
	0x10, 0x4c, 0xdf, 0x4b, 0x2a, 0xeb, 0x2a, 0x48, 0x69, 0xf1, 0x99, 0xe1, 0xd7, 0x00, 0x7b, 0xc1,
	0x4e, 0xad, 0x67, 0x21, 0x07, 0x79, 0xb3, 0x57, 0x73, 0xbf, 0x8c, 0xfc, 0xf0, 0xd6, 0xdb, 0x26,
	0xc9, 0xa0, 0x10, 0x2f, 0xc1, 0x0c, 0x6a, 0xd1, 0x75, 0x69, 0xff, 0xeb, 0xba, 0xd5, 0x61, 0x17,
	0xa6, 0xef, 0x64, 0xca, 0xc4, 0x76, 0x1d, 0xee, 0xb7, 0x9b, 0xca, 0xd2, 0x1d, 0xdd, 0x33, 0xc9,
	0x9d, 0xe7, 0x7e, 0x43, 0x30, 0x53, 0x8f, 0x1c, 0x98, 0x20, 0x2c, 0xe6, 0x22, 0xc1, 0x18, 0x8c,
	0x37, 0x82, 0xe7, 0x0a, 0xce, 0x24, 0x2a, 0xc6, 0x33, 0xd0, 0x42, 0xae, 0x06, 0x9b, 0x44, 0x0b,
	0x39, 0x7e, 0x0a, 0x63, 0xc2, 0x68, 0xc5, 0x0b, 0x4b, 0x57, 0x5e, 0xa7, 0xb0, 0x05, 0x8f, 0x02,
	0x5e, 0x1c, 0x32, 0x91, 0x5b, 0x86, 0x83, 0xbc, 0x09, 0xe9, 0x25, 0xb6, 0x01, 0x02, 0xc1, 0xa8,
	0x64, 0x61, 0x96, 0x33, 0xeb, 0xc1, 0x41, 0x9e, 0x4e, 0x06, 0x4e, 0x03, 0x32, 0x5e, 0xd3, 0xe3,
	0x91, 0x4b, 0xfc, 0x0c, 0xcc, 0x0f, 0x5c, 0x32, 0xb1, 0x4a, 0x12, 0xd1, 0x51, 0xdc, 0x8c, 0x66,
	0xc4, 0xaa, 0x2c, 0x05, 0x3f, 0xb1, 0x8e, 0xa7, 0x97, 0xf8, 0x31, 0xe8, 0x6f, 0xeb, 0x5c, 0x11,
	0x19, 0xa4, 0x09, 0x07, 0x98, 0xc6, 0x1d, 0xe6, 0x02, 0x26, 0xcd, 0x83, 0x03, 0x94, 0xbf, 0xda,
	0xfd, 0x0a, 0x66, 0x28, 0xea, 0x4a, 0xee, 0x98, 0xa4, 0xea, 0x3f, 0x29, 0xcd, 0x8a, 0x6d, 0xd2,
	0x81, 0xf4, 0x12, 0xbf, 0x80, 0x27, 0xaa, 0x2c, 0xe8, 0x6e, 0x41, 0xc1, 0xb6, 0x40, 0xff, 0x26,
	0x1a, 0x90, 0x1d, 0x93, 0x29, 0x4f, 0xfa, 0x7d, 0xb5, 0xaa, 0xd9, 0xf5, 0x86, 0x4a, 0xaa, 0xf0,
	0xa6, 0x44, 0xc5, 0xeb, 0xe7, 0x3f, 0x2f, 0x36, 0x3a, 0x5f, 0x6c, 0xf4, 0xfb, 0x62, 0xa3, 0xef,
	0x57, 0x7b, 0x74, 0xbe, 0xda, 0xa3, 0x5f, 0x57, 0x7b, 0xf4, 0xf1, 0xc1, 0xf7, 0x5f, 0x96, 0x51,
	0x34, 0x56, 0xb7, 0xb5, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x03, 0x48, 0x37, 0x8c, 0x02,
	0x00, 0x00,
}

func (m *StatusChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherIBTPIDs) > 0 {
		for iNdEx := len(m.OtherIBTPIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OtherIBTPIDs[iNdEx])
			copy(dAtA[i:], m.OtherIBTPIDs[iNdEx])
			i = encodeVarintBxhContract(dAtA, i, uint64(len(m.OtherIBTPIDs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CurStatus != 0 {
		i = encodeVarintBxhContract(dAtA, i, uint64(m.CurStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.PrevStatus != 0 {
		i = encodeVarintBxhContract(dAtA, i, uint64(m.PrevStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTime != 0 {
		i = encodeVarintBxhContract(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Confirm {
		i--
		if m.Confirm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ballot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ballot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ballot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteTime != 0 {
		i = encodeVarintBxhContract(dAtA, i, uint64(m.VoteTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.Num != 0 {
		i = encodeVarintBxhContract(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Approve) > 0 {
		i -= len(m.Approve)
		copy(dAtA[i:], m.Approve)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.Approve)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoterAddr) > 0 {
		i -= len(m.VoterAddr)
		copy(dAtA[i:], m.VoterAddr)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.VoterAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrustMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TrustContractAddr) > 0 {
		i -= len(m.TrustContractAddr)
		copy(dAtA[i:], m.TrustContractAddr)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.TrustContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBxhContract(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBxhContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovBxhContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrevStatus != 0 {
		n += 1 + sovBxhContract(uint64(m.PrevStatus))
	}
	if m.CurStatus != 0 {
		n += 1 + sovBxhContract(uint64(m.CurStatus))
	}
	if len(m.OtherIBTPIDs) > 0 {
		for _, s := range m.OtherIBTPIDs {
			l = len(s)
			n += 1 + l + sovBxhContract(uint64(l))
		}
	}
	return n
}

func (m *TransferRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	if m.Confirm {
		n += 2
	}
	if m.CreateTime != 0 {
		n += 1 + sovBxhContract(uint64(m.CreateTime))
	}
	return n
}

func (m *Ballot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterAddr)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.Approve)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovBxhContract(uint64(m.Num))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	if m.VoteTime != 0 {
		n += 1 + sovBxhContract(uint64(m.VoteTime))
	}
	return n
}

func (m *TrustMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.TrustContractAddr)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBxhContract(uint64(l))
	}
	return n
}

func sovBxhContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBxhContract(x uint64) (n int) {
	return sovBxhContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBxhContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevStatus", wireType)
			}
			m.PrevStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevStatus |= TransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurStatus", wireType)
			}
			m.CurStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurStatus |= TransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherIBTPIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherIBTPIDs = append(m.OtherIBTPIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBxhContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBxhContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBxhContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirm = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBxhContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBxhContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ballot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBxhContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ballot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ballot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTime", wireType)
			}
			m.VoteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBxhContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBxhContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrustMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBxhContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBxhContract
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBxhContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBxhContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBxhContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBxhContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBxhContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBxhContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBxhContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBxhContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBxhContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBxhContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBxhContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBxhContract = fmt.Errorf("proto: unexpected end of group")
)
